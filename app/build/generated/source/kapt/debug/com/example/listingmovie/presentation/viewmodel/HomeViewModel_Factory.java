// Generated by Dagger (https://dagger.dev).
package com.example.listingmovie.presentation.viewmodel;

import com.example.data.local.UserDataStoreManager;
import com.example.domain.usecase.GetMovieNowPlayingUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class HomeViewModel_Factory implements Factory<HomeViewModel> {
  private final Provider<UserDataStoreManager> prefProvider;

  private final Provider<GetMovieNowPlayingUseCase> getMovieNowPlayingUseCaseProvider;

  public HomeViewModel_Factory(Provider<UserDataStoreManager> prefProvider,
      Provider<GetMovieNowPlayingUseCase> getMovieNowPlayingUseCaseProvider) {
    this.prefProvider = prefProvider;
    this.getMovieNowPlayingUseCaseProvider = getMovieNowPlayingUseCaseProvider;
  }

  @Override
  public HomeViewModel get() {
    return newInstance(prefProvider.get(), getMovieNowPlayingUseCaseProvider.get());
  }

  public static HomeViewModel_Factory create(Provider<UserDataStoreManager> prefProvider,
      Provider<GetMovieNowPlayingUseCase> getMovieNowPlayingUseCaseProvider) {
    return new HomeViewModel_Factory(prefProvider, getMovieNowPlayingUseCaseProvider);
  }

  public static HomeViewModel newInstance(UserDataStoreManager pref,
      GetMovieNowPlayingUseCase getMovieNowPlayingUseCase) {
    return new HomeViewModel(pref, getMovieNowPlayingUseCase);
  }
}
